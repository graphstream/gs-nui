options { JDK_VERSION = "1.5"; STATIC = false; }

PARSER_BEGIN(StyleSheetParser)
/*
 * Copyright 2006 - 2012
 *     Stefan Balev     <stefan.balev@graphstream-project.org>
 *     Julien Baudry	<julien.baudry@graphstream-project.org>
 *     Antoine Dutot	<antoine.dutot@graphstream-project.org>
 *     Yoann Pign√©		<yoann.pigne@graphstream-project.org>
 *     Guilhelm Savin	<guilhelm.savin@graphstream-project.org>
 * 
 * This file is part of GraphStream <http://graphstream-project.org>.
 * 
 * GraphStream is a library whose purpose is to handle static or dynamic
 * graph, create them from scratch, file or any source and display them.
 * 
 * This program is free software distributed under the terms of two licenses, the
 * CeCILL-C license that fits European law, and the GNU Lesser General Public
 * License. You can  use, modify and/ or redistribute the software under the terms
 * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following
 * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by
 * the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.
 */
package org.graphstream.nui.style.parser;

import java.awt.Color;

import java.io.InputStream;
import java.io.IOException;
import java.io.Reader;

import java.util.LinkedList;

import org.graphstream.nui.style.*;
import org.graphstream.nui.style.util.ColorConverter;

import org.graphstream.util.parser.ParseException;
import org.graphstream.util.parser.SimpleCharStream;
import org.graphstream.util.parser.Token;
import org.graphstream.util.parser.TokenMgrError;

@SuppressWarnings("unused")
public class StyleSheetParser implements StyleConstants {
	/**
	 * The style sheet.
	 */
	protected StyleSheetParserListener listener;
	
	public StyleSheetParser( StyleSheetParserListener listener, InputStream stream )
	{
		this( stream );
		this.listener = listener;
	}
	
	public StyleSheetParser( StyleSheetParserListener listener, Reader stream )
	{
		this( stream );
		this.listener = listener;
	}
	
	public static class Number
	{
		public float value;
		public Units units = Units.PX;
		public Number( float value, Units units ) { this.value=value; this.units = units; }
	}
	
	/**
	 * Closes the parser, closing the opened stream.
	 */
    public void close() throws IOException {
		jj_input_stream.close();
	}
}
PARSER_END(StyleSheetParser)

/*
 * The lexer.
 */

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}
//
// Base tokens.
//
TOKEN: { < #EOL              : (("\r")|("\n"))> }
TOKEN: { < #DIGIT            : ["0"-"9"] > }
TOKEN: { < #HEXDIGIT         : (["0"-"9","a"-"f","A"-"F"])> }
TOKEN: { < #UNITS            : (("gu")|("px")|("%"))> }
TOKEN: { < DOT               : "." > }
TOKEN: { < LBRACE            : "{" > }
TOKEN: { < RBRACE            : "}" > }
TOKEN: { < LPAREN            : "(" > }
TOKEN: { < RPAREN            : ")" > }
TOKEN: { < SHARP             : "#" > }
TOKEN: { < COLON             : ":" > }
TOKEN: { < SEMICOLON         : ";" > }
TOKEN: { < COMA              : "," > }
//TOKEN: { < RGBA              : "rgba("(<DIGIT>){1,3}","(<DIGIT>){1,3}","(<DIGIT>){1,3}","(<DIGIT>){1,3}")" > }
//TOKEN: { < RGB               : "rgb("(<DIGIT>){1,3}","(<DIGIT>){1,3}","(<DIGIT>){1,3}")" > }
TOKEN: { < RGBA              : "rgba" > }
TOKEN: { < RGB               : "rgb" > } 
TOKEN: { < HTMLCOLOR         : ( "#" (((<HEXDIGIT>){3})|((<HEXDIGIT>){4})|((<HEXDIGIT>){6})|((<HEXDIGIT>){8})|((<HEXDIGIT>){9})|((<HEXDIGIT>){12})|((<HEXDIGIT>){16})) ) > }
TOKEN: { < REAL              : ( "-" | "+" )? ( <DIGIT> )+ ( "." (<DIGIT>)+ )? (<UNITS>)? > } 
TOKEN: { < STRING            : (("\"" (~["\""])* "\"")|("'" (~["'"])* "'")) > }
TOKEN: { < URL               : "url" > }
//
// Selectors.
//
TOKEN: { < GRAPH             : "graph" > }
TOKEN: { < EDGE              : "edge" > }
TOKEN: { < NODE              : "node" > }
TOKEN: { < SPRITE            : "sprite" > }
//
// General properties.
//
TOKEN: { < FILLMODE          : "fill-mode" > }
TOKEN: { < FILLCOLOR         : "fill-color" > }
TOKEN: { < FILLIMAGE         : "fill-image" > }

TOKEN: { < STROKEMODE        : "stroke-mode" > }
TOKEN: { < STROKECOLOR       : "stroke-color" > } 	 
TOKEN: { < STROKEWIDTH       : "stroke-width" > }

TOKEN: { < SHADOWMODE        : "shadow-mode" > }
TOKEN: { < SHADOWCOLOR       : "shadow-color" > }
TOKEN: { < SHADOWWIDTH       : "shadow-width" > }
TOKEN: { < SHADOWOFFSET      : "shadow-offset" > }

TOKEN: { < TEXTMODE          : "text-mode" > }
TOKEN: { < TEXTCOLOR         : "text-color" > }
TOKEN: { < TEXTSTYLE         : "text-style" > }
TOKEN: { < TEXTFONT          : "text-font" > }
TOKEN: { < TEXTSIZE          : "text-size" > }
TOKEN: { < TEXTVISIBILITYMODE: "text-visibility-mode" > }
TOKEN: { < TEXTVISIBILITY    : "text-visibility" > }
TOKEN: { < TEXTBACKGROUNDMODE: "text-background-mode" > }
TOKEN: { < TEXTBACKGROUNDCOLOR: "text-background-color" > }
TOKEN: { < TEXTOFFSET        : "text-offset" > }
TOKEN: { < TEXTPADDING       : "text-padding" > }

TOKEN: { < ICONMODE          : "icon-mode" > }
TOKEN: { < ICON              : "icon" > }

TOKEN: { < PADDING           : "padding" > }

TOKEN: { < ZINDEX            : "z-index" > }
TOKEN: { < VISIBILITYMODE    : "visibility-mode" > }
TOKEN: { < VISIBILITY        : "visibility" > }
//
// Properties common to nodes, edges and sprites.
//
TOKEN: { < SHAPE             : "shape" > }
TOKEN: { < SIZE              : "size" > }
TOKEN: { < SIZEMODE          : "size-mode" > }
TOKEN: { < SHAPEPOINTS       : "shape-points" > }
TOKEN: { < TEXTALIGNMENT     : "text-alignment" > }
TOKEN: { < JCOMPONENT        : "jcomponent" > }
//
// Properties for edges only.
//
TOKEN: { < ARROWIMGURL       : "arrow-image" > }
TOKEN: { < ARROWSIZE         : "arrow-size" > }
TOKEN: { < ARROWSHAPE        : "arrow-shape" > }
//
// Properties for sprites only.
//
TOKEN: { < SPRITEORIENT      : "sprite-orientation" > }
//
// Properties for graphs only.
//
TOKEN: { < CANVASCOLOR       : "canvas-color" > }
//
// Property values.
//
TOKEN: { < PLAIN             : "plain" > }
TOKEN: { < DYNPLAIN          : "dyn-plain" > }
TOKEN: { < DYNSIZE           : "dyn-size" > }
TOKEN: { < DYNICON           : "dyn-icon" > }

TOKEN: { < DASHES            : "dashes" > }
TOKEN: { < DOTS              : "dots" > }
TOKEN: { < DOUBLE            : "double" > }

TOKEN: { < GRADIENTDIAGONAL1 : "gradient-diagonal1" > }
TOKEN: { < GRADIENTDIAGONAL2 : "gradient-diagonal2" > }
TOKEN: { < GRADIENTHORIZONTAL: "gradient-horizontal" > }
TOKEN: { < GRADIENTRADIAL    : "gradient-radial" > }
TOKEN: { < GRADIENTVERTICAL  : "gradient-vertical" > }

TOKEN: { < HIDDEN            : "hidden" > }

TOKEN: { < IMAGETILED        : "image-tiled" > }
TOKEN: { < IMAGESCALED       : "image-scaled" > }
TOKEN: { < IMAGESCALEDRATIOMAX : "image-scaled-ratio-max" > }
TOKEN: { < IMAGESCALEDRATIOMIN : "image-scaled-ratio-min" > }

TOKEN: { < NONE              : "none" > }
TOKEN: { < NORMAL            : "normal" > }
TOKEN: { < TRUNCATED         : "truncated"> }
TOKEN: { < ZOOMRANGE         : "zoom-range" > }
TOKEN: { < ATZOOM            : "at-zoom" >  }
TOKEN: { < UNDERZOOM         : "under-zoom" > }
TOKEN: { < OVERZOOM          : "over-zoom" > }
TOKEN: { < ZOOMS             : "zooms" > }
TOKEN: { < FIT               : "fit" >  }

TOKEN: { < BOLD              : "bold" > }
TOKEN: { < BOLD_ITALIC       : "bold-italic" > }
TOKEN: { < ITALIC            : "italic" > }

TOKEN: { < ALONG             : "along" > }
TOKEN: { < ATLEFT            : "at-left" > }
TOKEN: { < ATRIGHT           : "at-right" > }
TOKEN: { < CENTER            : "center" > }
TOKEN: { < LEFT              : "left" > }
TOKEN: { < RIGHT             : "right" > }
TOKEN: { < UNDER             : "under" > }
TOKEN: { < ABOVE             : "above" > }
TOKEN: { < JUSTIFY           : "justify" > }

TOKEN: { < CIRCLE            : "circle" > }
TOKEN: { < TRIANGLE          : "triangle" > }
TOKEN: { < FREEPLANE         : "freeplane" > }
TOKEN: { < TEXTBOX           : "text-box" > }
TOKEN: { < TEXTROUNDEDBOX    : "text-rounded-box" > }
TOKEN: { < TEXTCIRCLE        : "text-circle" > }
TOKEN: { < TEXTDIAMOND       : "text-diamond" > }
TOKEN: { < TEXTPARAGRAPH     : "text-paragraph" > }
TOKEN: { < BOX               : "box" > }
TOKEN: { < ROUNDEDBOX        : "rounded-box" > }
TOKEN: { < CROSS             : "cross" > }
TOKEN: { < DIAMOND           : "diamond" > }
TOKEN: { < POLYGON           : "polygon" > }

TOKEN: { < BUTTON            : "button" > }
TOKEN: { < TEXTFIELD         : "text-field" > }
TOKEN: { < PANEL             : "panel" > }

TOKEN: { < LINE              : "line" > }
TOKEN: { < POLYLINE          : "polyline" > } 
TOKEN: { < POLYLINESCALED    : "polyline-scaled" > }
TOKEN: { < ANGLE             : "angle" > }
TOKEN: { < CUBICCURVE        : "cubic-curve" > }
TOKEN: { < BLOB              : "blob" > }
TOKEN: { < SQUARELINE        : "square-line" > }
TOKEN: { < LSQUARELINE       : "L-square-line" > }
TOKEN: { < HSQUARELINE       : "horizontal-square-line" > }
TOKEN: { < VSQUARELINE       : "vertical-square-line" > }

TOKEN: { < ARROW             : "arrow" > }
TOKEN: { < FLOW              : "flow" > }
TOKEN: { < PIECHART          : "pie-chart" > }
TOKEN: { < IMAGE             : "image" > }
TOKEN: { < IMAGES            : "images" > }

TOKEN: { < FROM              : "from" > }
TOKEN: { < NODE0             : "node0" > }
TOKEN: { < TO                : "to" > }
TOKEN: { < NODE1             : "node1" > }
TOKEN: { < PROJECTION        : "projection" > }

TOKEN: { < CLICKED           : "clicked" > }
TOKEN: { < SELECTED          : "selected" > }

//
// More base tokens that must appear at the end for precedence reasons.
//
TOKEN: { < IDENTIFIER    : (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* > }
TOKEN: { < COMMENT       : ("/*"(~["*"])* "*/" ) | ( "//"((~["\r","\n"])*)<EOL> ) > }


/*
 * The parser.
 */

void start():
{
}
{
	( rule() | <COMMENT> )* <EOF>
}

void rule():
{
	Selector select;
	ElementStyle rule;
}
{
	select=select()
	{
		rule  = new ElementStyle( select );
	}
	<LBRACE> ( styles(rule) ) <RBRACE>
	{ listener.elementStyleAdded(rule); }
}

void styles( ElementStyle rule ):
{}
{
	( style(rule) )*
}

Selector select():
{
	Token    t;
	
	Selector.Target target = Selector.Target.UNDEFINED;
	String id = null;
	LinkedList<String> uiClass = new LinkedList<String>();
	String state = null;
}
{
	( ( <GRAPH>  { target = Selector.Target.GRAPH; } )
	| ( <NODE>   { target = Selector.Target.NODE; } )
	| ( <EDGE>   { target = Selector.Target.EDGE; } )
	| ( <SPRITE> { target = Selector.Target.SPRITE; } )
	)
	( <SHARP> ( ( t=<IDENTIFIER> { id = t.image; } )
				| ( t=<STRING>   { id = t.image.substring( 1, t.image.length()-1 ); } )
				)
	)?
	( <DOT>   ( ( t=<IDENTIFIER> { uiClass.add( t.image ); } )
	          | ( t=<CLICKED>    { uiClass.add( "clicked" ); } )  // If we want "clicked" and
	          | ( t=<SELECTED>   { uiClass.add( "selected" ); } ) // "selected" to be normal classes.
			  | ( t=<STRING>     { uiClass.add( t.image.substring( 1, t.image.length()-1 ) ); } )
			  )
	)*
	( <COLON> ( (   <CLICKED>    { state = "clicked"; } )  
	          | (   <SELECTED>   { state = "selected"; } )
	          | ( t=<STRING>     { state = t.image.substring( 1, t.image.length()-1 ); } )
	          | ( t=<IDENTIFIER> { state = t.image; } )
	          )
	)?
	{ return new Selector(target, id, uiClass.toArray(new String[uiClass.size()]), state); }
}

void style( ElementStyle style ):
{
	Color                   color;
	Colors                  colors;
	String                  url;
	Value                   value;
	Values                  values;
	FillMode           fillMode;
	StrokeMode         strokeMode;
	ShadowMode         shadowMode;
	TextMode           textMode;
	TextVisibilityMode textVisMode;
	TextBackgroundMode textBgMode;
	TextStyle          textStyle;
	TextAlignment      textAlignment;
	IconMode           iconMode;
	VisibilityMode     visMode;
	SizeMode           sizeMode;
	Shape              shape;
	SpriteOrientation  spriteOrient;
	ArrowShape         arrowShape;
	JComponents        component;
}
{
	( ( <COMMENT> )
	| ( <ZINDEX>             <COLON> value         = value()             <SEMICOLON> { style.set( "z-index", new Integer( (int)value.value )  ); } )
	| ( <FILLMODE>           <COLON> fillMode      = fillMode()          <SEMICOLON> { style.set( "fill-mode",            fillMode       ); } )
	| ( <FILLCOLOR>          <COLON> colors        = colors()            <SEMICOLON> { style.set( "fill-color",           colors         ); } )
	| ( <FILLIMAGE>          <COLON> url           = url()               <SEMICOLON> { style.set( "fill-image",           url            ); } )
	| ( <STROKEMODE>         <COLON> strokeMode    = strokeMode()        <SEMICOLON> { style.set( "stroke-mode",          strokeMode     ); } )
	| ( <STROKECOLOR>        <COLON> colors        = colors()            <SEMICOLON> { style.set( "stroke-color",         colors         ); } )
	| ( <STROKEWIDTH>        <COLON> value         = value()             <SEMICOLON> { style.set( "stroke-width",         value          ); } )
	| ( <SHADOWMODE>         <COLON> shadowMode    = shadowMode()        <SEMICOLON> { style.set( "shadow-mode",          shadowMode     ); } )
	| ( <SHADOWCOLOR>        <COLON> colors        = colors()            <SEMICOLON> { style.set( "shadow-color",         colors         ); } )
	| ( <SHADOWWIDTH>        <COLON> value         = value()             <SEMICOLON> { style.set( "shadow-width",         value          ); } )
	| ( <SHADOWOFFSET>       <COLON> values        = values()            <SEMICOLON> { style.set( "shadow-offset",        values         ); } )
	| ( <PADDING>            <COLON> values        = values()            <SEMICOLON> { style.set( "padding",              values         ); } )
	| ( <TEXTMODE>           <COLON> textMode      = textMode()          <SEMICOLON> { style.set( "text-mode",            textMode       ); } )
	| ( <TEXTVISIBILITYMODE> <COLON> textVisMode   = textVisMode()       <SEMICOLON> { style.set( "text-visibility-mode", textVisMode    ); } )
	| ( <TEXTVISIBILITY>     <COLON> values        = values()            <SEMICOLON> { style.set( "text-visibility",      values         ); } )
	| ( <TEXTBACKGROUNDMODE> <COLON> textBgMode    = textBgMode()        <SEMICOLON> { style.set( "text-background-mode", textBgMode     ); } )
	| ( <TEXTCOLOR>          <COLON> colors        = colors()            <SEMICOLON> { style.set( "text-color",           colors         ); } )
	| ( <TEXTBACKGROUNDCOLOR><COLON> colors        = colors()            <SEMICOLON> { style.set( "text-background-color", colors        ); } )
	| ( <TEXTSTYLE>          <COLON> textStyle     = textStyle()         <SEMICOLON> { style.set( "text-style",           textStyle      ); } )
	| ( <TEXTFONT>           <COLON> url           = font()              <SEMICOLON> { style.set( "text-font",            url            ); } )
	| ( <TEXTSIZE>           <COLON> value         = value()             <SEMICOLON> { style.set( "text-size",            value          ); } )
	| ( <TEXTALIGNMENT>      <COLON> textAlignment = textAlign()         <SEMICOLON> { style.set( "text-alignment",       textAlignment  ); } )
	| ( <TEXTOFFSET>         <COLON> values        = values()            <SEMICOLON> { style.set( "text-offset",          values         ); } )
	| ( <TEXTPADDING>        <COLON> values        = values()            <SEMICOLON> { style.set( "text-padding",         values         ); } )
	| ( <ICONMODE>           <COLON> iconMode      = iconMode()          <SEMICOLON> { style.set( "icon-mode",            iconMode       ); } )
	| ( <ICON>               <COLON> url           = icon()              <SEMICOLON> { style.set( "icon",                 url            ); } )
	| ( <JCOMPONENT>         <COLON> component     = jcomponent()        <SEMICOLON> { style.set( "jcomponent",           component      ); } )
	| ( <VISIBILITYMODE>     <COLON> visMode       = visMode()           <SEMICOLON> { style.set( "visibility-mode",      visMode        ); } )
	| ( <VISIBILITY>         <COLON> values        = values()            <SEMICOLON> { style.set( "visibility",           values         ); } )
	| ( <SIZEMODE>           <COLON> sizeMode      = sizeMode()          <SEMICOLON> { style.set( "size-mode",            sizeMode       ); } )
	| ( <SIZE>               <COLON> values        = values()            <SEMICOLON> { style.set( "size",                 values         ); } )
	| ( <SHAPEPOINTS>        <COLON> values        = values()            <SEMICOLON> { style.set( "shape-points",         values         ); } )
	| ( <SHAPE>              <COLON> shape         = shape()             <SEMICOLON> { style.set( "shape",                shape          ); } )
	| ( <SPRITEORIENT>       <COLON> spriteOrient  = spriteOrient()      <SEMICOLON> { style.set( "sprite-orientation",   spriteOrient   ); } )
	| ( <ARROWSHAPE>         <COLON> arrowShape    = arrowShape()        <SEMICOLON> { style.set( "arrow-shape",          arrowShape     ); } )
	| ( <ARROWIMGURL>        <COLON> url           = url()               <SEMICOLON> { style.set( "arrow-image",          url            ); } )
	| ( <ARROWSIZE>          <COLON> values        = values()            <SEMICOLON> { style.set( "arrow-size",           values         ); } )	
	| ( <CANVASCOLOR>        <COLON> colors        = colors()            <SEMICOLON> { style.set( "canvas-color",         colors         ); } )
	)
}

Value value():
{
	Token t;
	Units units = Units.PX;
	Value value = null;
}
{
	t = <REAL> 
	{
		String nb = t.image.toLowerCase();
		
		if( nb.endsWith( "px" ) )
		{
			units = Units.PX;
			nb    = nb.substring( 0, nb.length()-2 );
		}
		else if( nb.endsWith( "gu" ) )
		{
			units = Units.GU;
			nb    = nb.substring( 0, nb.length()-2 ); 
		}
		else if( nb.endsWith( "%" ) )
		{
			units = Units.PERCENTS;
			nb    = nb.substring( 0, nb.length()-1 );
		} 
	
		try {
			value = new Value( units, Double.parseDouble( nb ) );
		} catch( NumberFormatException e ) {
			generateParseException();
		}
		
		return value;
	}
}

Values values():
{
	Values values = new Values();
	Value  value;
}
{
	         value = value() { values.add(value); }
	( <COMA> value = value() { values.add(value); } )*
	{ return values; }
}

String url():
{
	Token t;
}
{
	<URL> <LPAREN> t=<STRING> <RPAREN>
	{ return t.image.substring( 1, t.image.length()-1 ); }
}

String icon():
{
  String s;
}
{
	( <DYNICON > { return "dynamic"; }
	| s = url()   { return s; }
	) 
}

String font():
{
	Token  t;
	String s;
}
{
	( ( t=<IDENTIFIER> { s = t.image; } )
	| ( t=<STRING>     { s = t.image.substring( 1, t.image.length()-1 ); } )
	)
	{ return s; }
}

Color color():
{
	Token  t;
	String s;
	Token r, g, b, a;
}
{
	( ( <RGB>  <LPAREN> r=<REAL> <COMA> g=<REAL> <COMA> b=<REAL> <RPAREN> { s = String.format("rgb(%s,%s,%s)", r.image, g.image, b.image); } )
	| ( <RGBA> <LPAREN> r=<REAL> <COMA> g=<REAL> <COMA> b=<REAL> <COMA> a=<REAL> <RPAREN> { s = String.format("rgba(%s,%s,%s,%s)", r.image, g.image, b.image, a.image); } )
	| ( t=<HTMLCOLOR>  { s = t.image; } )
	| ( t=<IDENTIFIER> { s = t.image; } )
	| ( t=<STRING>     { s = t.image.substring( 1, t.image.length()-1 ); } )
	)
	{
		Color color = ColorConverter.convertColor( s );
		if( color == null ) color = Color.BLACK; 
		return color;
	}
}

Colors colors():
{
	Colors colors = new Colors();
	Color  color;
}
{
	         color = color() { colors.add( color ); }
	( <COMA> color = color() { colors.add( color ); } )*
	{ return colors; }
}

FillMode fillMode():
{
	FillMode m;
}
{
	( ( <NONE>                { m = FillMode.NONE;                   } )
	| ( <PLAIN>               { m = FillMode.PLAIN;                  } )
	| ( <DYNPLAIN>            { m = FillMode.DYN_PLAIN;              } )
	| ( <GRADIENTRADIAL>      { m = FillMode.GRADIENT_RADIAL;        } )
	| ( <GRADIENTVERTICAL>    { m = FillMode.GRADIENT_VERTICAL;      } )
	| ( <GRADIENTHORIZONTAL>  { m = FillMode.GRADIENT_HORIZONTAL;    } )
	| ( <GRADIENTDIAGONAL1>   { m = FillMode.GRADIENT_DIAGONAL1;     } )
	| ( <GRADIENTDIAGONAL2>   { m = FillMode.GRADIENT_DIAGONAL2;     } )
	| ( <IMAGETILED>          { m = FillMode.IMAGE_TILED;            } )
	| ( <IMAGESCALED>         { m = FillMode.IMAGE_SCALED;           } )
	| ( <IMAGESCALEDRATIOMAX> { m = FillMode.IMAGE_SCALED_RATIO_MAX; } )
	| ( <IMAGESCALEDRATIOMIN> { m = FillMode.IMAGE_SCALED_RATIO_MIN; } )
	)
	{ return m; }	
}

StrokeMode strokeMode():
{
	StrokeMode m;
}
{
	( ( <NONE>               { m = StrokeMode.NONE;   } )
	| ( <PLAIN>              { m = StrokeMode.PLAIN;  } )
	| ( <DASHES>             { m = StrokeMode.DASHES; } )
	| ( <DOTS>               { m = StrokeMode.DOTS;   } )
	| ( <DOUBLE>             { m = StrokeMode.DOUBLE; } )
	)
	{ return m; }
}

ShadowMode shadowMode():
{
	ShadowMode s;
}
{
	( ( <NONE>                { s = ShadowMode.NONE;                } )
	| ( <PLAIN>               { s = ShadowMode.PLAIN;               } )
	| ( <GRADIENTRADIAL>      { s = ShadowMode.GRADIENT_RADIAL;     } )
	| ( <GRADIENTHORIZONTAL>  { s = ShadowMode.GRADIENT_HORIZONTAL; } )
	| ( <GRADIENTVERTICAL>    { s = ShadowMode.GRADIENT_VERTICAL;   } )
	| ( <GRADIENTDIAGONAL1>   { s = ShadowMode.GRADIENT_DIAGONAL1;  } )
	| ( <GRADIENTDIAGONAL2>   { s = ShadowMode.GRADIENT_DIAGONAL2;  } )
	)
	{ return s; }
}

TextMode textMode():
{
	TextMode m;
}
{
	( ( <NORMAL>    { m = TextMode.NORMAL;    } )
	| ( <HIDDEN>    { m = TextMode.HIDDEN;    } )
	| ( <TRUNCATED> { m = TextMode.TRUNCATED; } )
	)
	{ return m; }
}

TextVisibilityMode textVisMode():
{
	TextVisibilityMode m;
}
{
	( ( <NORMAL>    { m = TextVisibilityMode.NORMAL;     } )
	| ( <HIDDEN>    { m = TextVisibilityMode.HIDDEN;     } )
	| ( <ATZOOM>    { m = TextVisibilityMode.AT_ZOOM;    } )
	| ( <UNDERZOOM> { m = TextVisibilityMode.UNDER_ZOOM; } )
	| ( <OVERZOOM>  { m = TextVisibilityMode.OVER_ZOOM;  } )
	| ( <ZOOMRANGE> { m = TextVisibilityMode.ZOOM_RANGE; } )
	| ( <ZOOMS>     { m = TextVisibilityMode.ZOOMS;      } )
	)
	{ return m; }
}

TextBackgroundMode textBgMode():
{
  	TextBackgroundMode m;
}
{
	( ( <NONE>       { m = TextBackgroundMode.NONE;       } )
	| ( <PLAIN>      { m = TextBackgroundMode.PLAIN;      } )
	| ( <ROUNDEDBOX> { m = TextBackgroundMode.ROUNDEDBOX; } )
	)
	{ return m; } 
}

TextStyle textStyle():
{
	TextStyle t;
}
{
	( ( <NORMAL>      { t = TextStyle.NORMAL;      } )
	| ( <BOLD>        { t = TextStyle.BOLD;        } )
	| ( <ITALIC>      { t = TextStyle.ITALIC;      } )
	| ( <BOLD_ITALIC> { t = TextStyle.BOLD_ITALIC; } )
	)
	{ return t; }
}

SizeMode sizeMode():
{
	SizeMode m;
}
{
	( ( <NORMAL>  { m = SizeMode.NORMAL;   } )
    | ( <FIT >    { m = SizeMode.FIT;      } ) 
	| ( <DYNSIZE> { m = SizeMode.DYN_SIZE; } )
	)
	{ return m; }
}

TextAlignment textAlign():
{
	TextAlignment t;
}
{
	( ( <CENTER>   { t = TextAlignment.CENTER;    } )
	| ( <LEFT>     { t = TextAlignment.LEFT;      } )
	| ( <RIGHT>    { t = TextAlignment.RIGHT;     } )
	| ( <ATLEFT>   { t = TextAlignment.AT_LEFT;   } )
	| ( <ATRIGHT>  { t = TextAlignment.AT_RIGHT;  } )
	| ( <UNDER>    { t = TextAlignment.UNDER;     } ) 
	| ( <ABOVE>    { t = TextAlignment.ABOVE;     } ) 
	| ( <JUSTIFY>  { t = TextAlignment.JUSTIFY;   } ) 
	| ( <ALONG>    { t = TextAlignment.ALONG;     } ) 
	)
	{ return t; }
}

IconMode iconMode():
{
	IconMode i;
}
{
	( ( <NONE>    { i = IconMode.NONE;     } )
	| ( <ATLEFT>  { i = IconMode.AT_LEFT;  } )
	| ( <ATRIGHT> { i = IconMode.AT_RIGHT; } )
	| ( <ABOVE>   { i = IconMode.ABOVE;    } )
	| ( <UNDER>   { i = IconMode.UNDER;    } )
	)
	{ return i; }
}

VisibilityMode visMode():
{
	VisibilityMode m;
}
{
	( ( <NORMAL>    { m = VisibilityMode.NORMAL; } )
	| ( <HIDDEN>    { m = VisibilityMode.HIDDEN; } )
	| ( <ATZOOM>    { m = VisibilityMode.AT_ZOOM; } )
	| ( <UNDERZOOM> { m = VisibilityMode.UNDER_ZOOM; } )
	| ( <OVERZOOM>  { m = VisibilityMode.OVER_ZOOM; } )
	| ( <ZOOMRANGE> { m = VisibilityMode.ZOOM_RANGE; } )
	| ( <ZOOMS>     { m = VisibilityMode.ZOOMS; } )
	)
	{ return m; }
}

Shape shape():
{
	Shape s;
}
{
	( ( <CIRCLE>         { s = Shape.CIRCLE;           } )
	| ( <BOX>            { s = Shape.BOX;              } )
	| ( <ROUNDEDBOX>     { s = Shape.ROUNDED_BOX;      } )
	| ( <TRIANGLE>       { s = Shape.TRIANGLE;         } )
	| ( <CROSS>          { s = Shape.CROSS;            } )
	| ( <DIAMOND>        { s = Shape.DIAMOND;          } )
	| ( <POLYGON>        { s = Shape.POLYGON;          } )
	| ( <FREEPLANE>      { s = Shape.FREEPLANE;        } )
	| ( <TEXTBOX>        { s = Shape.TEXT_BOX;         } )
	| ( <TEXTROUNDEDBOX> { s = Shape.TEXT_ROUNDED_BOX; } )
	| ( <TEXTCIRCLE>     { s = Shape.TEXT_CIRCLE;      } )
	| ( <TEXTDIAMOND>    { s = Shape.TEXT_DIAMOND;     } )
	| ( <TEXTPARAGRAPH>  { s = Shape.TEXT_PARAGRAPH;   } )
	| ( <JCOMPONENT>     { s = Shape.JCOMPONENT;       } )

	| ( <PIECHART>       { s = Shape.PIE_CHART;        } )
	| ( <FLOW>           { s = Shape.FLOW;             } )
	| ( <ARROW>          { s = Shape.ARROW;            } )

	| ( <LINE>           { s = Shape.LINE;             } )
	| ( <ANGLE>          { s = Shape.ANGLE;            } )
	| ( <CUBICCURVE>     { s = Shape.CUBIC_CURVE;      } )
	| ( <POLYLINE>       { s = Shape.POLYLINE;         } )
	| ( <POLYLINESCALED> { s = Shape.POLYLINE_SCALED;  } )
	| ( <BLOB>           { s = Shape.BLOB;             } )
	| ( <SQUARELINE>     { s = Shape.SQUARELINE;       } )
	| ( <LSQUARELINE>    { s = Shape.LSQUARELINE;      } )
	| ( <HSQUARELINE>    { s = Shape.HSQUARELINE;      } )
	| ( <VSQUARELINE>    { s = Shape.VSQUARELINE;      } )
	)
	{ return s; }
}

ArrowShape arrowShape():
{
	ArrowShape s;
}
{
	( ( <NONE>    { s = ArrowShape.NONE;    } )
	| ( <ARROW>   { s = ArrowShape.ARROW;   } )
	| ( <CIRCLE>  { s = ArrowShape.CIRCLE;  } )
	| ( <DIAMOND> { s = ArrowShape.DIAMOND; } )
	| ( <IMAGE>   { s = ArrowShape.IMAGE;   } )
	)
	{ return s; }
}

JComponents jcomponent():
{
	JComponents c;
}
{
	( ( <BUTTON>    { c = JComponents.BUTTON;     } )
	| ( <TEXTFIELD> { c = JComponents.TEXT_FIELD; } )
	| ( <PANEL>     { c = JComponents.PANEL;      } ) 
	)
	{ return c; }
}

SpriteOrientation spriteOrient():
{
	SpriteOrientation s;
}
{
	( ( <NONE>       { s = SpriteOrientation.NONE;       } )
	| ( <TO>         { s = SpriteOrientation.TO;         } )
	| ( <FROM>       { s = SpriteOrientation.FROM;       } )
	| ( <NODE0>      { s = SpriteOrientation.NODE0;      } )
	| ( <NODE1>      { s = SpriteOrientation.NODE1;      } )
	| ( <PROJECTION> { s = SpriteOrientation.PROJECTION; } )
	)
	{ return s; }
}
